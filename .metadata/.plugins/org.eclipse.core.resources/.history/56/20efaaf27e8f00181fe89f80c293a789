package adt.skipList;

public class SkipListImpl<T> implements SkipList<T> {

	protected SkipListNode<T> root;
	protected SkipListNode<T> NIL;

	protected int maxHeight;

	protected double PROBABILITY = 0.5;

	public SkipListImpl(int maxHeight) {
		this.maxHeight = maxHeight;
		root = new SkipListNode(Integer.MIN_VALUE, maxHeight, null);
		NIL = new SkipListNode(Integer.MAX_VALUE, maxHeight, null);
		connectRootToNil();
	}

	/**
	 * Faz a ligacao inicial entre os apontadores forward do ROOT e o NIL Caso
	 * esteja-se usando o level do ROOT igual ao maxLevel esse metodo deve
	 * conectar todos os forward. Senao o ROOT eh inicializado com level=1 e o
	 * metodo deve conectar apenas o forward[0].
	 */
	private void connectRootToNil() {
		for (int i = 0; i < maxHeight; i++) {
			root.forward[i] = NIL;
		}
	}

	
	@SuppressWarnings("unchecked")
	@Override
	public void insert(int key, T newValue, int height) {
		if(height > this.maxHeight) {
			throw new RuntimeException();
		}
		
		SkipListNode<T> node = this.root;
		SkipListNode<T>[] update = (SkipListNode<T>[]) new Comparable[this.maxHeight];
		for(int i = this.maxHeight - 1; i >= 0; i--) {
			while(node.forward[i].key < key) {
				node = node.forward[i];
			}
			update[i] = node;
		}
		node = node.forward[0];
		
		if(node.key == key) {
			node.setValue(newValue);
		}else {
			SkipListNode<T> novo = new SkipListNode<T>(key, height, newValue);
			for(int i = 0; i <= height - 1; i++) {
				novo.forward[i] = update[i].forward[i];
				update[i].forward[i] = novo;
			}
		}
	}

	@SuppressWarnings({ "unchecked" })
	@Override
	public void remove(int key) {
		if(this.size() > 0) {
			SkipListNode<T>[] update = (SkipListNode<T>[]) new Comparable[this.maxHeight];
			SkipListNode<T> node = this.root;
			for(int i = this.maxHeight; i >= 0; i--) {
				while(node.forward[i].key < key) {
					node = node.forward[i];
				}
				update[i] = node;
			}
			node = node.forward[0];
			
			if(node.key == key) {
				for(int i = 0; i <= node.height(); i++) {
					if(!update[i].forward[i].equals(node)) {
						break;
					}
					update[i].forward[i] = node.forward[i];
				}
			}
		}
	}

	@Override
	public int height() {
		int retorno = 0;
		if(this.size() > 0) {
			SkipListNode<T> node = this.root;
			int i = this.maxHeight - 1;
			while(node.forward[i].equals(this.NIL)) {
				i--;
			}
			retorno = i + 1;
		}
		return retorno;
	}

	@Override
	public SkipListNode<T> search(int key) {
		SkipListNode<T> retorno = null;
		SkipListNode<T> node = this.root;
		for(int i = this.maxHeight - 1; i >= 0; i--) {
			while(node.forward[i].key < key) {
				node = node.forward[i];
			}
		}
		node = node.forward[0];
		
		if(node.getKey() == key) {
			retorno = node;
		}
		return retorno;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public SkipListNode<T>[] toArray() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

}
