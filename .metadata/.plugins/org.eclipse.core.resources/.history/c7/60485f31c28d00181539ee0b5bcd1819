package adt.bst;

import adt.bt.BTNode;

public class BSTImpl<T extends Comparable<T>> implements BST<T> {

	protected BSTNode<T> root;

	public BSTImpl() {
		root = new BSTNode<T>();
	}

	public BSTNode<T> getRoot() {
		return this.root;
	}

	@Override
	public boolean isEmpty() {
		return root.isEmpty();
	}

	@Override
	public int height() {
		if(!this.isEmpty()) {
			return height(this.root) - 1;
		}
		return -1;
	}
	
	private int height(BSTNode<T> node) {
		int retorno = 0;
		if(!node.isEmpty()) {
			int left = height((BSTNode<T>) node.getLeft());
			int right = height((BSTNode<T>) node.getRight());
			
			if(left > right) {
				retorno = height((BSTNode<T>) node.getLeft()) + 1;
			}else {
				retorno = height((BSTNode<T>) node.getRight()) + 1;
			}
		}
		return retorno;
	}

	@Override
	public BSTNode<T> search(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public void insert(T element) {
		if (element != null) {
		     insert(this.root, element);
		}
	}
	
	private void insert(BTNode<T> node, T element) {
        if (node.isEmpty()) {
           node.setData(element);
  
           BSTNode<T> left = new BSTNode<T>();
           left.setParent(node);
  
           BSTNode<T> right = new BSTNode<T>();
           right.setParent(node);
  
           node.setLeft(left);
           node.setRight(right);
        }else {
      	  if(node.getData().compareTo(element) != 0) {
      		  if (node.getData().compareTo(element) > 0) {
      	            insert(node.getLeft(), element);
      	         }else {
      	            insert(node.getRight(), element);
      	         }
      	  }
        }
     }

	@Override
	public BSTNode<T> maximum() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public BSTNode<T> minimum() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public BSTNode<T> sucessor(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public BSTNode<T> predecessor(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public void remove(T element) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public T[] preOrder() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public T[] order() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	@Override
	public T[] postOrder() {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException("Not implemented yet!");
	}

	/**
	 * This method is already implemented using recursion. You must understand
	 * how it work and use similar idea with the other methods.
	 */
	@Override
	public int size() {
		return size(root);
	}

	private int size(BSTNode<T> node) {
		int result = 0;
		// base case means doing nothing (return 0)
		if (!node.isEmpty()) { // indusctive case
			result = 1 + size((BSTNode<T>) node.getLeft())
					+ size((BSTNode<T>) node.getRight());
		}
		return result;
	}

}
